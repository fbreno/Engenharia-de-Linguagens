  %{
    #include <stdio.h>  
    //#include "y.tab.h"
  %}

  %%
  [ \t]                 ;
  [ \n]                 {yylineno = yylineno + 1;}
  ","                   {printf("COMMA \n");/*return yytext[0];*/}
  [0-9]+                {printf("NUMBER(%s)\n",yytext);/*yylval.iValue = atoi(yytext); return NUMBER;*/}

  "int"                 {printf("INT \n");/*return INT ;*/}
  "char"                {printf("CHAR \n");/*return CHAR ;*/}
  "vazio"               {printf("VOID \n");/*return VOID ;*/}
  "float"     {printf("FLOAT \n");/* yylval.fValue = atof(yytext); return FLOAT;*/}
  "double"              {printf("DOUBLE \n");/*return DOUBLE ;*/}

  "para"                {printf("FOR \n");/*return FOR ;*/}
  "struct"[\t]+[a-zA-Z_][a-zA-Z0-9]* {printf("STRUCT ID \n");/* yylval.strval = strdup(yytext + 6); return STRUCT_ID; */}
  "struct"              {printf("STRUCT ID \n");/*return STRUCT ;*/}

  "escreva"             {printf("PRINT\n");/*return PRINT ;*/}
  "escreval"            {printf("PRINTF \n");/*return PRINTF ;*/}

  "leia"                {printf("SCANF \n");/*return SCANF ;*/}
  "enquanto"            {printf("WHILE \n");/*return WHILE ;*/}
  "se"      	          {printf("IF \n");/*return IF ;*/}
  "senao"      	        {printf("ELSE \n");/*return ELSE ;*/}
  "sair"                {printf("BREAK \n");/*return BREAK ;*/}
  "continue"            {printf("CONTINUE \n");/*return CONTINUE ;*/}
  "verdadeiro"          {printf("TRUE \n");/*return TRUE ;*/}
  "falso"               {printf("FALSE \n");/*return FALSE ;*/}
  "retorne"             {printf("RETURN \n");/*return RETURN ;*/}
  "importe"             {printf("IMPORT \n");/*return IMPORT ;*/}
  "principal"           {printf("MAIN \n");/*return MAIN;*/}

  ";"      	            {printf("SEMICOLON \n");/*return SEMICOLON ;*/}
  "="		                {printf("ASSIGN \n");/*return ASSIGN ;*/}
  "+"                   {printf("PLUS \n");/*return PLUS ;*/}
  "++"                  {printf("PLUSPLUS \n");/*return PLUSPLUS ;*/}
  "-"                   {printf("MINUS \n");/*return MINUS ;*/}
  "--"                  {printf("MINUSMINUS \n");/*return MINUSMINUS ;*/}
  "*"                   {printf("TIMES \n");/*return TIMES ;*/}
  "/"                   {printf("DIVIDE \n");/*return DIVIDE ;*/}
  "%"                   {printf("REST_OF_DIVISION \n");/*return REST_OF_DIVISION ;*/}

  ">"                   {printf ("GT \n");/*return GT;*/}
  "<"                   {printf ("LT \n");/*return LT;*/}
  "<="                  {printf ("LE \n");/*return LE;*/}
  ">="                  {printf ("GE \n");/*return GE;*/}
  "=="                  {printf ("EQ \n");/*return EQ;*/}
  "!="                  {printf ("NE \n");/*return NE;*/}

  "("                   {printf("LEFT_PARENTHESIS \n");/*return yytext[0];*/}
  ")"                   {printf("RIGHT_PARENTHESIS \n");/*return yytext[0];*/}
  "["                   {printf("LEFT_BRACKET \n");/*return yytext[0];*/}
  "]"                   {printf("RIGHT_BRACKET \n");/*return yytext[0];*/}
  "{"                   {printf("LEFT_BRACE \n");/*return yytext[0];*/}
  "}"                   {printf("RIGHT_BRACE \n");/*return yytext[0];*/}

  "&&"                  {printf("LOGIC_AND \n");/*return LOGIC_AND;*/}
  "||"                  {printf("LOGIC_OR \n");/*return LOGIC_OR;*/}
  "!"                   {printf("NOT \n");/*return NOT;*/}

  [a-zA-Z][a-zA-Z0-9]*  {printf("ID(%s)\n",yytext);/*yylval.sValue = strdup(yytext); return ID;*/}
  .                     {yyerror("invalid character");}

%%

#ifndef yywrap
   int yywrap (void) {return 1;}
#endif

int main(void)
{
  yylex();
  return 0;
}

void yyerror(char *msg) {
  fprintf(stderr, "%s\n", msg);
}

