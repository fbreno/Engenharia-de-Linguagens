Nonterminals useless in grammar

    parameter_list_opt
    parameter_list
    parameter_declaration
    compound_statement
    statement_list


Terminals unused in grammar

    SHORT
    PRINT
    PRINTF
    SCANF
    TRUE
    FALSE
    IMPORT
    COLON
    PLUSPLUS
    MINUSMINUS
    REST_OF_DIVISION
    LEFT_PARENTHESIS
    RIGHT_PARENTHESIS
    LEFT_BRACKET
    RIGHT_BRACKET
    LEFT_BRACE
    RIGHT_BRACE
    NOT
    '{'
    '}'


Rules useless in grammar

   70 declaration: type_specifier ID '(' parameter_list_opt ')' compound_statement

   71 parameter_list_opt: parameter_list

   72 parameter_list: parameter_declaration
   73               | parameter_list ',' parameter_declaration

   74 parameter_declaration: type_specifier ID

   75 compound_statement: '{' statement_list '}'

   76 statement_list: statement_list statement

   77 statement: compound_statement


State 114 conflicts: 8 shift/reduce
State 115 conflicts: 9 shift/reduce
State 121 conflicts: 8 shift/reduce
State 122 conflicts: 8 shift/reduce


Grammar

    0 $accept: program $end

    1 program: statement

    2 statement: declaration
    3          | statement declaration

    4 type_specifier: INT
    5               | CHAR
    6               | LONG
    7               | VOID
    8               | FLOAT
    9               | DOUBLE
   10               | STRUCT
   11               | BOOLEAN

   12 declaration: type_specifier ID SEMICOLON

   13 statement: expression_statement
   14          | conditional_statement
   15          | iteration_statement
   16          | jump_statement

   17 expression_statement: SEMICOLON
   18                     | expression SEMICOLON

   19 conditional_statement: IF '(' expression ')' statement
   20                      | IF '(' expression ')' statement ELSE statement

   21 iteration_statement: WHILE '(' expression ')' statement
   22                    | FOR '(' expression_statement_opt expression_opt SEMICOLON expression_opt ')' statement

   23 expression_statement_opt: expression_statement

   24 expression_opt: expression

   25 jump_statement: BREAK SEMICOLON
   26               | CONTINUE SEMICOLON
   27               | RETURN expression_opt SEMICOLON

   28 expression: assignment_expression
   29           | expression ',' assignment_expression

   30 assignment_expression: conditional_expression
   31                      | unary_expression assignment_operator assignment_expression

   32 assignment_operator: ASSIGN
   33                    | TIMES
   34                    | DIVIDE
   35                    | PLUS
   36                    | MINUS

   37 conditional_expression: logical_or_expression
   38                       | logical_or_expression '?' expression ':' conditional_expression

   39 logical_or_expression: logical_and_expression
   40                      | logical_or_expression LOGIC_OR logical_and_expression

   41 logical_and_expression: equality_expression
   42                       | logical_and_expression LOGIC_AND equality_expression

   43 equality_expression: relational_expression
   44                    | equality_expression EQ relational_expression
   45                    | equality_expression NE relational_expression

   46 relational_expression: additive_expression
   47                      | relational_expression LT additive_expression
   48                      | relational_expression GT additive_expression
   49                      | relational_expression LE additive_expression
   50                      | relational_expression GE additive_expression

   51 additive_expression: multiplicative_expression
   52                    | additive_expression '+' multiplicative_expression
   53                    | additive_expression '-' multiplicative_expression

   54 multiplicative_expression: unary_expression
   55                          | multiplicative_expression '*' unary_expression
   56                          | multiplicative_expression '/' unary_expression

   57 unary_expression: postfix_expression
   58                 | '+' unary_expression
   59                 | '-' unary_expression
   60                 | '!' unary_expression

   61 postfix_expression: primary_expression
   62                   | postfix_expression '[' expression ']'
   63                   | postfix_expression '(' argument_expression_list_opt ')'

   64 argument_expression_list_opt: argument_expression_list

   65 argument_expression_list: assignment_expression
   66                         | argument_expression_list ',' assignment_expression

   67 primary_expression: ID
   68                   | NUMBER
   69                   | '(' expression ')'


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 60
    '(' (40) 19 20 21 22 63 69
    ')' (41) 19 20 21 22 63 69
    '*' (42) 55
    '+' (43) 52 58
    ',' (44) 29 66
    '-' (45) 53 59
    '/' (47) 56
    ':' (58) 38
    '?' (63) 38
    '[' (91) 62
    ']' (93) 62
    '{' (123)
    '}' (125)
    error (256)
    INT (258) 4
    CHAR (259) 5
    SHORT (260)
    LONG (261) 6
    VOID (262) 7
    FLOAT (263) 8
    DOUBLE (264) 9
    BOOLEAN (265) 11
    FOR (266) 22
    STRUCT (267) 10
    PRINT (268)
    PRINTF (269)
    SCANF (270)
    WHILE (271) 21
    IF (272) 19 20
    ELSE (273) 20
    BREAK (274) 25
    CONTINUE (275) 26
    TRUE (276)
    FALSE (277)
    RETURN (278) 27
    IMPORT (279)
    SEMICOLON (280) 12 17 18 22 25 26 27
    COLON (281)
    ASSIGN (282) 32
    PLUS (283) 35
    PLUSPLUS (284)
    MINUS (285) 36
    MINUSMINUS (286)
    TIMES (287) 33
    DIVIDE (288) 34
    REST_OF_DIVISION (289)
    GT (290) 48
    LT (291) 47
    LE (292) 49
    GE (293) 50
    EQ (294) 44
    NE (295) 45
    LEFT_PARENTHESIS (296)
    RIGHT_PARENTHESIS (297)
    NUMBER (298) 68
    ID (299) 12 67
    LEFT_BRACKET (300)
    RIGHT_BRACKET (301)
    LEFT_BRACE (302)
    RIGHT_BRACE (303)
    LOGIC_AND (304) 42
    LOGIC_OR (305) 40
    NOT (306)
    IFX (307)


Nonterminals, with rules where they appear

    $accept (67)
        on left: 0
    program (68)
        on left: 1
        on right: 0
    statement (69)
        on left: 2 3 13 14 15 16
        on right: 1 3 19 20 21 22
    type_specifier (70)
        on left: 4 5 6 7 8 9 10 11
        on right: 12
    declaration (71)
        on left: 12
        on right: 2 3
    expression_statement (72)
        on left: 17 18
        on right: 13 23
    conditional_statement (73)
        on left: 19 20
        on right: 14
    iteration_statement (74)
        on left: 21 22
        on right: 15
    expression_statement_opt (75)
        on left: 23
        on right: 22
    expression_opt (76)
        on left: 24
        on right: 22 27
    jump_statement (77)
        on left: 25 26 27
        on right: 16
    expression (78)
        on left: 28 29
        on right: 18 19 20 21 24 29 38 62 69
    assignment_expression (79)
        on left: 30 31
        on right: 28 29 31 65 66
    assignment_operator (80)
        on left: 32 33 34 35 36
        on right: 31
    conditional_expression (81)
        on left: 37 38
        on right: 30 38
    logical_or_expression (82)
        on left: 39 40
        on right: 37 38 40
    logical_and_expression (83)
        on left: 41 42
        on right: 39 40 42
    equality_expression (84)
        on left: 43 44 45
        on right: 41 42 44 45
    relational_expression (85)
        on left: 46 47 48 49 50
        on right: 43 44 45 47 48 49 50
    additive_expression (86)
        on left: 51 52 53
        on right: 46 47 48 49 50 52 53
    multiplicative_expression (87)
        on left: 54 55 56
        on right: 51 52 53 55 56
    unary_expression (88)
        on left: 57 58 59 60
        on right: 31 54 55 56 58 59 60
    postfix_expression (89)
        on left: 61 62 63
        on right: 57 62 63
    argument_expression_list_opt (90)
        on left: 64
        on right: 63
    argument_expression_list (91)
        on left: 65 66
        on right: 64 66
    primary_expression (92)
        on left: 67 68 69
        on right: 61


State 0

    0 $accept: • program $end

    INT        shift, and go to state 1
    CHAR       shift, and go to state 2
    LONG       shift, and go to state 3
    VOID       shift, and go to state 4
    FLOAT      shift, and go to state 5
    DOUBLE     shift, and go to state 6
    BOOLEAN    shift, and go to state 7
    FOR        shift, and go to state 8
    STRUCT     shift, and go to state 9
    WHILE      shift, and go to state 10
    IF         shift, and go to state 11
    BREAK      shift, and go to state 12
    CONTINUE   shift, and go to state 13
    RETURN     shift, and go to state 14
    SEMICOLON  shift, and go to state 15
    NUMBER     shift, and go to state 16
    ID         shift, and go to state 17
    '('        shift, and go to state 18
    '+'        shift, and go to state 19
    '-'        shift, and go to state 20
    '!'        shift, and go to state 21

    program                    go to state 22
    statement                  go to state 23
    type_specifier             go to state 24
    declaration                go to state 25
    expression_statement       go to state 26
    conditional_statement      go to state 27
    iteration_statement        go to state 28
    jump_statement             go to state 29
    expression                 go to state 30
    assignment_expression      go to state 31
    conditional_expression     go to state 32
    logical_or_expression      go to state 33
    logical_and_expression     go to state 34
    equality_expression        go to state 35
    relational_expression      go to state 36
    additive_expression        go to state 37
    multiplicative_expression  go to state 38
    unary_expression           go to state 39
    postfix_expression         go to state 40
    primary_expression         go to state 41


State 1

    4 type_specifier: INT •

    $default  reduce using rule 4 (type_specifier)


State 2

    5 type_specifier: CHAR •

    $default  reduce using rule 5 (type_specifier)


State 3

    6 type_specifier: LONG •

    $default  reduce using rule 6 (type_specifier)


State 4

    7 type_specifier: VOID •

    $default  reduce using rule 7 (type_specifier)


State 5

    8 type_specifier: FLOAT •

    $default  reduce using rule 8 (type_specifier)


State 6

    9 type_specifier: DOUBLE •

    $default  reduce using rule 9 (type_specifier)


State 7

   11 type_specifier: BOOLEAN •

    $default  reduce using rule 11 (type_specifier)


State 8

   22 iteration_statement: FOR • '(' expression_statement_opt expression_opt SEMICOLON expression_opt ')' statement

    '('  shift, and go to state 42


State 9

   10 type_specifier: STRUCT •

    $default  reduce using rule 10 (type_specifier)


State 10

   21 iteration_statement: WHILE • '(' expression ')' statement

    '('  shift, and go to state 43


State 11

   19 conditional_statement: IF • '(' expression ')' statement
   20                      | IF • '(' expression ')' statement ELSE statement

    '('  shift, and go to state 44


State 12

   25 jump_statement: BREAK • SEMICOLON

    SEMICOLON  shift, and go to state 45


State 13

   26 jump_statement: CONTINUE • SEMICOLON

    SEMICOLON  shift, and go to state 46


State 14

   27 jump_statement: RETURN • expression_opt SEMICOLON

    NUMBER  shift, and go to state 16
    ID      shift, and go to state 17
    '('     shift, and go to state 18
    '+'     shift, and go to state 19
    '-'     shift, and go to state 20
    '!'     shift, and go to state 21

    expression_opt             go to state 47
    expression                 go to state 48
    assignment_expression      go to state 31
    conditional_expression     go to state 32
    logical_or_expression      go to state 33
    logical_and_expression     go to state 34
    equality_expression        go to state 35
    relational_expression      go to state 36
    additive_expression        go to state 37
    multiplicative_expression  go to state 38
    unary_expression           go to state 39
    postfix_expression         go to state 40
    primary_expression         go to state 41


State 15

   17 expression_statement: SEMICOLON •

    $default  reduce using rule 17 (expression_statement)


State 16

   68 primary_expression: NUMBER •

    $default  reduce using rule 68 (primary_expression)


State 17

   67 primary_expression: ID •

    $default  reduce using rule 67 (primary_expression)


State 18

   69 primary_expression: '(' • expression ')'

    NUMBER  shift, and go to state 16
    ID      shift, and go to state 17
    '('     shift, and go to state 18
    '+'     shift, and go to state 19
    '-'     shift, and go to state 20
    '!'     shift, and go to state 21

    expression                 go to state 49
    assignment_expression      go to state 31
    conditional_expression     go to state 32
    logical_or_expression      go to state 33
    logical_and_expression     go to state 34
    equality_expression        go to state 35
    relational_expression      go to state 36
    additive_expression        go to state 37
    multiplicative_expression  go to state 38
    unary_expression           go to state 39
    postfix_expression         go to state 40
    primary_expression         go to state 41


State 19

   58 unary_expression: '+' • unary_expression

    NUMBER  shift, and go to state 16
    ID      shift, and go to state 17
    '('     shift, and go to state 18
    '+'     shift, and go to state 19
    '-'     shift, and go to state 20
    '!'     shift, and go to state 21

    unary_expression    go to state 50
    postfix_expression  go to state 40
    primary_expression  go to state 41


State 20

   59 unary_expression: '-' • unary_expression

    NUMBER  shift, and go to state 16
    ID      shift, and go to state 17
    '('     shift, and go to state 18
    '+'     shift, and go to state 19
    '-'     shift, and go to state 20
    '!'     shift, and go to state 21

    unary_expression    go to state 51
    postfix_expression  go to state 40
    primary_expression  go to state 41


State 21

   60 unary_expression: '!' • unary_expression

    NUMBER  shift, and go to state 16
    ID      shift, and go to state 17
    '('     shift, and go to state 18
    '+'     shift, and go to state 19
    '-'     shift, and go to state 20
    '!'     shift, and go to state 21

    unary_expression    go to state 52
    postfix_expression  go to state 40
    primary_expression  go to state 41


State 22

    0 $accept: program • $end

    $end  shift, and go to state 53


State 23

    1 program: statement •
    3 statement: statement • declaration

    INT      shift, and go to state 1
    CHAR     shift, and go to state 2
    LONG     shift, and go to state 3
    VOID     shift, and go to state 4
    FLOAT    shift, and go to state 5
    DOUBLE   shift, and go to state 6
    BOOLEAN  shift, and go to state 7
    STRUCT   shift, and go to state 9

    $default  reduce using rule 1 (program)

    type_specifier  go to state 24
    declaration     go to state 54


State 24

   12 declaration: type_specifier • ID SEMICOLON

    ID  shift, and go to state 55


State 25

    2 statement: declaration •

    $default  reduce using rule 2 (statement)


State 26

   13 statement: expression_statement •

    $default  reduce using rule 13 (statement)


State 27

   14 statement: conditional_statement •

    $default  reduce using rule 14 (statement)


State 28

   15 statement: iteration_statement •

    $default  reduce using rule 15 (statement)


State 29

   16 statement: jump_statement •

    $default  reduce using rule 16 (statement)


State 30

   18 expression_statement: expression • SEMICOLON
   29 expression: expression • ',' assignment_expression

    SEMICOLON  shift, and go to state 56
    ','        shift, and go to state 57


State 31

   28 expression: assignment_expression •

    $default  reduce using rule 28 (expression)


State 32

   30 assignment_expression: conditional_expression •

    $default  reduce using rule 30 (assignment_expression)


State 33

   37 conditional_expression: logical_or_expression •
   38                       | logical_or_expression • '?' expression ':' conditional_expression
   40 logical_or_expression: logical_or_expression • LOGIC_OR logical_and_expression

    LOGIC_OR  shift, and go to state 58
    '?'       shift, and go to state 59

    $default  reduce using rule 37 (conditional_expression)


State 34

   39 logical_or_expression: logical_and_expression •
   42 logical_and_expression: logical_and_expression • LOGIC_AND equality_expression

    LOGIC_AND  shift, and go to state 60

    $default  reduce using rule 39 (logical_or_expression)


State 35

   41 logical_and_expression: equality_expression •
   44 equality_expression: equality_expression • EQ relational_expression
   45                    | equality_expression • NE relational_expression

    EQ  shift, and go to state 61
    NE  shift, and go to state 62

    $default  reduce using rule 41 (logical_and_expression)


State 36

   43 equality_expression: relational_expression •
   47 relational_expression: relational_expression • LT additive_expression
   48                      | relational_expression • GT additive_expression
   49                      | relational_expression • LE additive_expression
   50                      | relational_expression • GE additive_expression

    GT  shift, and go to state 63
    LT  shift, and go to state 64
    LE  shift, and go to state 65
    GE  shift, and go to state 66

    $default  reduce using rule 43 (equality_expression)


State 37

   46 relational_expression: additive_expression •
   52 additive_expression: additive_expression • '+' multiplicative_expression
   53                    | additive_expression • '-' multiplicative_expression

    '+'  shift, and go to state 67
    '-'  shift, and go to state 68

    $default  reduce using rule 46 (relational_expression)


State 38

   51 additive_expression: multiplicative_expression •
   55 multiplicative_expression: multiplicative_expression • '*' unary_expression
   56                          | multiplicative_expression • '/' unary_expression

    '*'  shift, and go to state 69
    '/'  shift, and go to state 70

    $default  reduce using rule 51 (additive_expression)


State 39

   31 assignment_expression: unary_expression • assignment_operator assignment_expression
   54 multiplicative_expression: unary_expression •

    ASSIGN  shift, and go to state 71
    PLUS    shift, and go to state 72
    MINUS   shift, and go to state 73
    TIMES   shift, and go to state 74
    DIVIDE  shift, and go to state 75

    $default  reduce using rule 54 (multiplicative_expression)

    assignment_operator  go to state 76


State 40

   57 unary_expression: postfix_expression •
   62 postfix_expression: postfix_expression • '[' expression ']'
   63                   | postfix_expression • '(' argument_expression_list_opt ')'

    '('  shift, and go to state 77
    '['  shift, and go to state 78

    $default  reduce using rule 57 (unary_expression)


State 41

   61 postfix_expression: primary_expression •

    $default  reduce using rule 61 (postfix_expression)


State 42

   22 iteration_statement: FOR '(' • expression_statement_opt expression_opt SEMICOLON expression_opt ')' statement

    SEMICOLON  shift, and go to state 15
    NUMBER     shift, and go to state 16
    ID         shift, and go to state 17
    '('        shift, and go to state 18
    '+'        shift, and go to state 19
    '-'        shift, and go to state 20
    '!'        shift, and go to state 21

    expression_statement       go to state 79
    expression_statement_opt   go to state 80
    expression                 go to state 30
    assignment_expression      go to state 31
    conditional_expression     go to state 32
    logical_or_expression      go to state 33
    logical_and_expression     go to state 34
    equality_expression        go to state 35
    relational_expression      go to state 36
    additive_expression        go to state 37
    multiplicative_expression  go to state 38
    unary_expression           go to state 39
    postfix_expression         go to state 40
    primary_expression         go to state 41


State 43

   21 iteration_statement: WHILE '(' • expression ')' statement

    NUMBER  shift, and go to state 16
    ID      shift, and go to state 17
    '('     shift, and go to state 18
    '+'     shift, and go to state 19
    '-'     shift, and go to state 20
    '!'     shift, and go to state 21

    expression                 go to state 81
    assignment_expression      go to state 31
    conditional_expression     go to state 32
    logical_or_expression      go to state 33
    logical_and_expression     go to state 34
    equality_expression        go to state 35
    relational_expression      go to state 36
    additive_expression        go to state 37
    multiplicative_expression  go to state 38
    unary_expression           go to state 39
    postfix_expression         go to state 40
    primary_expression         go to state 41


State 44

   19 conditional_statement: IF '(' • expression ')' statement
   20                      | IF '(' • expression ')' statement ELSE statement

    NUMBER  shift, and go to state 16
    ID      shift, and go to state 17
    '('     shift, and go to state 18
    '+'     shift, and go to state 19
    '-'     shift, and go to state 20
    '!'     shift, and go to state 21

    expression                 go to state 82
    assignment_expression      go to state 31
    conditional_expression     go to state 32
    logical_or_expression      go to state 33
    logical_and_expression     go to state 34
    equality_expression        go to state 35
    relational_expression      go to state 36
    additive_expression        go to state 37
    multiplicative_expression  go to state 38
    unary_expression           go to state 39
    postfix_expression         go to state 40
    primary_expression         go to state 41


State 45

   25 jump_statement: BREAK SEMICOLON •

    $default  reduce using rule 25 (jump_statement)


State 46

   26 jump_statement: CONTINUE SEMICOLON •

    $default  reduce using rule 26 (jump_statement)


State 47

   27 jump_statement: RETURN expression_opt • SEMICOLON

    SEMICOLON  shift, and go to state 83


State 48

   24 expression_opt: expression •
   29 expression: expression • ',' assignment_expression

    ','  shift, and go to state 57

    $default  reduce using rule 24 (expression_opt)


State 49

   29 expression: expression • ',' assignment_expression
   69 primary_expression: '(' expression • ')'

    ')'  shift, and go to state 84
    ','  shift, and go to state 57


State 50

   58 unary_expression: '+' unary_expression •

    $default  reduce using rule 58 (unary_expression)


State 51

   59 unary_expression: '-' unary_expression •

    $default  reduce using rule 59 (unary_expression)


State 52

   60 unary_expression: '!' unary_expression •

    $default  reduce using rule 60 (unary_expression)


State 53

    0 $accept: program $end •

    $default  accept


State 54

    3 statement: statement declaration •

    $default  reduce using rule 3 (statement)


State 55

   12 declaration: type_specifier ID • SEMICOLON

    SEMICOLON  shift, and go to state 85


State 56

   18 expression_statement: expression SEMICOLON •

    $default  reduce using rule 18 (expression_statement)


State 57

   29 expression: expression ',' • assignment_expression

    NUMBER  shift, and go to state 16
    ID      shift, and go to state 17
    '('     shift, and go to state 18
    '+'     shift, and go to state 19
    '-'     shift, and go to state 20
    '!'     shift, and go to state 21

    assignment_expression      go to state 86
    conditional_expression     go to state 32
    logical_or_expression      go to state 33
    logical_and_expression     go to state 34
    equality_expression        go to state 35
    relational_expression      go to state 36
    additive_expression        go to state 37
    multiplicative_expression  go to state 38
    unary_expression           go to state 39
    postfix_expression         go to state 40
    primary_expression         go to state 41


State 58

   40 logical_or_expression: logical_or_expression LOGIC_OR • logical_and_expression

    NUMBER  shift, and go to state 16
    ID      shift, and go to state 17
    '('     shift, and go to state 18
    '+'     shift, and go to state 19
    '-'     shift, and go to state 20
    '!'     shift, and go to state 21

    logical_and_expression     go to state 87
    equality_expression        go to state 35
    relational_expression      go to state 36
    additive_expression        go to state 37
    multiplicative_expression  go to state 38
    unary_expression           go to state 88
    postfix_expression         go to state 40
    primary_expression         go to state 41


State 59

   38 conditional_expression: logical_or_expression '?' • expression ':' conditional_expression

    NUMBER  shift, and go to state 16
    ID      shift, and go to state 17
    '('     shift, and go to state 18
    '+'     shift, and go to state 19
    '-'     shift, and go to state 20
    '!'     shift, and go to state 21

    expression                 go to state 89
    assignment_expression      go to state 31
    conditional_expression     go to state 32
    logical_or_expression      go to state 33
    logical_and_expression     go to state 34
    equality_expression        go to state 35
    relational_expression      go to state 36
    additive_expression        go to state 37
    multiplicative_expression  go to state 38
    unary_expression           go to state 39
    postfix_expression         go to state 40
    primary_expression         go to state 41


State 60

   42 logical_and_expression: logical_and_expression LOGIC_AND • equality_expression

    NUMBER  shift, and go to state 16
    ID      shift, and go to state 17
    '('     shift, and go to state 18
    '+'     shift, and go to state 19
    '-'     shift, and go to state 20
    '!'     shift, and go to state 21

    equality_expression        go to state 90
    relational_expression      go to state 36
    additive_expression        go to state 37
    multiplicative_expression  go to state 38
    unary_expression           go to state 88
    postfix_expression         go to state 40
    primary_expression         go to state 41


State 61

   44 equality_expression: equality_expression EQ • relational_expression

    NUMBER  shift, and go to state 16
    ID      shift, and go to state 17
    '('     shift, and go to state 18
    '+'     shift, and go to state 19
    '-'     shift, and go to state 20
    '!'     shift, and go to state 21

    relational_expression      go to state 91
    additive_expression        go to state 37
    multiplicative_expression  go to state 38
    unary_expression           go to state 88
    postfix_expression         go to state 40
    primary_expression         go to state 41


State 62

   45 equality_expression: equality_expression NE • relational_expression

    NUMBER  shift, and go to state 16
    ID      shift, and go to state 17
    '('     shift, and go to state 18
    '+'     shift, and go to state 19
    '-'     shift, and go to state 20
    '!'     shift, and go to state 21

    relational_expression      go to state 92
    additive_expression        go to state 37
    multiplicative_expression  go to state 38
    unary_expression           go to state 88
    postfix_expression         go to state 40
    primary_expression         go to state 41


State 63

   48 relational_expression: relational_expression GT • additive_expression

    NUMBER  shift, and go to state 16
    ID      shift, and go to state 17
    '('     shift, and go to state 18
    '+'     shift, and go to state 19
    '-'     shift, and go to state 20
    '!'     shift, and go to state 21

    additive_expression        go to state 93
    multiplicative_expression  go to state 38
    unary_expression           go to state 88
    postfix_expression         go to state 40
    primary_expression         go to state 41


State 64

   47 relational_expression: relational_expression LT • additive_expression

    NUMBER  shift, and go to state 16
    ID      shift, and go to state 17
    '('     shift, and go to state 18
    '+'     shift, and go to state 19
    '-'     shift, and go to state 20
    '!'     shift, and go to state 21

    additive_expression        go to state 94
    multiplicative_expression  go to state 38
    unary_expression           go to state 88
    postfix_expression         go to state 40
    primary_expression         go to state 41


State 65

   49 relational_expression: relational_expression LE • additive_expression

    NUMBER  shift, and go to state 16
    ID      shift, and go to state 17
    '('     shift, and go to state 18
    '+'     shift, and go to state 19
    '-'     shift, and go to state 20
    '!'     shift, and go to state 21

    additive_expression        go to state 95
    multiplicative_expression  go to state 38
    unary_expression           go to state 88
    postfix_expression         go to state 40
    primary_expression         go to state 41


State 66

   50 relational_expression: relational_expression GE • additive_expression

    NUMBER  shift, and go to state 16
    ID      shift, and go to state 17
    '('     shift, and go to state 18
    '+'     shift, and go to state 19
    '-'     shift, and go to state 20
    '!'     shift, and go to state 21

    additive_expression        go to state 96
    multiplicative_expression  go to state 38
    unary_expression           go to state 88
    postfix_expression         go to state 40
    primary_expression         go to state 41


State 67

   52 additive_expression: additive_expression '+' • multiplicative_expression

    NUMBER  shift, and go to state 16
    ID      shift, and go to state 17
    '('     shift, and go to state 18
    '+'     shift, and go to state 19
    '-'     shift, and go to state 20
    '!'     shift, and go to state 21

    multiplicative_expression  go to state 97
    unary_expression           go to state 88
    postfix_expression         go to state 40
    primary_expression         go to state 41


State 68

   53 additive_expression: additive_expression '-' • multiplicative_expression

    NUMBER  shift, and go to state 16
    ID      shift, and go to state 17
    '('     shift, and go to state 18
    '+'     shift, and go to state 19
    '-'     shift, and go to state 20
    '!'     shift, and go to state 21

    multiplicative_expression  go to state 98
    unary_expression           go to state 88
    postfix_expression         go to state 40
    primary_expression         go to state 41


State 69

   55 multiplicative_expression: multiplicative_expression '*' • unary_expression

    NUMBER  shift, and go to state 16
    ID      shift, and go to state 17
    '('     shift, and go to state 18
    '+'     shift, and go to state 19
    '-'     shift, and go to state 20
    '!'     shift, and go to state 21

    unary_expression    go to state 99
    postfix_expression  go to state 40
    primary_expression  go to state 41


State 70

   56 multiplicative_expression: multiplicative_expression '/' • unary_expression

    NUMBER  shift, and go to state 16
    ID      shift, and go to state 17
    '('     shift, and go to state 18
    '+'     shift, and go to state 19
    '-'     shift, and go to state 20
    '!'     shift, and go to state 21

    unary_expression    go to state 100
    postfix_expression  go to state 40
    primary_expression  go to state 41


State 71

   32 assignment_operator: ASSIGN •

    $default  reduce using rule 32 (assignment_operator)


State 72

   35 assignment_operator: PLUS •

    $default  reduce using rule 35 (assignment_operator)


State 73

   36 assignment_operator: MINUS •

    $default  reduce using rule 36 (assignment_operator)


State 74

   33 assignment_operator: TIMES •

    $default  reduce using rule 33 (assignment_operator)


State 75

   34 assignment_operator: DIVIDE •

    $default  reduce using rule 34 (assignment_operator)


State 76

   31 assignment_expression: unary_expression assignment_operator • assignment_expression

    NUMBER  shift, and go to state 16
    ID      shift, and go to state 17
    '('     shift, and go to state 18
    '+'     shift, and go to state 19
    '-'     shift, and go to state 20
    '!'     shift, and go to state 21

    assignment_expression      go to state 101
    conditional_expression     go to state 32
    logical_or_expression      go to state 33
    logical_and_expression     go to state 34
    equality_expression        go to state 35
    relational_expression      go to state 36
    additive_expression        go to state 37
    multiplicative_expression  go to state 38
    unary_expression           go to state 39
    postfix_expression         go to state 40
    primary_expression         go to state 41


State 77

   63 postfix_expression: postfix_expression '(' • argument_expression_list_opt ')'

    NUMBER  shift, and go to state 16
    ID      shift, and go to state 17
    '('     shift, and go to state 18
    '+'     shift, and go to state 19
    '-'     shift, and go to state 20
    '!'     shift, and go to state 21

    assignment_expression         go to state 102
    conditional_expression        go to state 32
    logical_or_expression         go to state 33
    logical_and_expression        go to state 34
    equality_expression           go to state 35
    relational_expression         go to state 36
    additive_expression           go to state 37
    multiplicative_expression     go to state 38
    unary_expression              go to state 39
    postfix_expression            go to state 40
    argument_expression_list_opt  go to state 103
    argument_expression_list      go to state 104
    primary_expression            go to state 41


State 78

   62 postfix_expression: postfix_expression '[' • expression ']'

    NUMBER  shift, and go to state 16
    ID      shift, and go to state 17
    '('     shift, and go to state 18
    '+'     shift, and go to state 19
    '-'     shift, and go to state 20
    '!'     shift, and go to state 21

    expression                 go to state 105
    assignment_expression      go to state 31
    conditional_expression     go to state 32
    logical_or_expression      go to state 33
    logical_and_expression     go to state 34
    equality_expression        go to state 35
    relational_expression      go to state 36
    additive_expression        go to state 37
    multiplicative_expression  go to state 38
    unary_expression           go to state 39
    postfix_expression         go to state 40
    primary_expression         go to state 41


State 79

   23 expression_statement_opt: expression_statement •

    $default  reduce using rule 23 (expression_statement_opt)


State 80

   22 iteration_statement: FOR '(' expression_statement_opt • expression_opt SEMICOLON expression_opt ')' statement

    NUMBER  shift, and go to state 16
    ID      shift, and go to state 17
    '('     shift, and go to state 18
    '+'     shift, and go to state 19
    '-'     shift, and go to state 20
    '!'     shift, and go to state 21

    expression_opt             go to state 106
    expression                 go to state 48
    assignment_expression      go to state 31
    conditional_expression     go to state 32
    logical_or_expression      go to state 33
    logical_and_expression     go to state 34
    equality_expression        go to state 35
    relational_expression      go to state 36
    additive_expression        go to state 37
    multiplicative_expression  go to state 38
    unary_expression           go to state 39
    postfix_expression         go to state 40
    primary_expression         go to state 41


State 81

   21 iteration_statement: WHILE '(' expression • ')' statement
   29 expression: expression • ',' assignment_expression

    ')'  shift, and go to state 107
    ','  shift, and go to state 57


State 82

   19 conditional_statement: IF '(' expression • ')' statement
   20                      | IF '(' expression • ')' statement ELSE statement
   29 expression: expression • ',' assignment_expression

    ')'  shift, and go to state 108
    ','  shift, and go to state 57


State 83

   27 jump_statement: RETURN expression_opt SEMICOLON •

    $default  reduce using rule 27 (jump_statement)


State 84

   69 primary_expression: '(' expression ')' •

    $default  reduce using rule 69 (primary_expression)


State 85

   12 declaration: type_specifier ID SEMICOLON •

    $default  reduce using rule 12 (declaration)


State 86

   29 expression: expression ',' assignment_expression •

    $default  reduce using rule 29 (expression)


State 87

   40 logical_or_expression: logical_or_expression LOGIC_OR logical_and_expression •
   42 logical_and_expression: logical_and_expression • LOGIC_AND equality_expression

    LOGIC_AND  shift, and go to state 60

    $default  reduce using rule 40 (logical_or_expression)


State 88

   54 multiplicative_expression: unary_expression •

    $default  reduce using rule 54 (multiplicative_expression)


State 89

   29 expression: expression • ',' assignment_expression
   38 conditional_expression: logical_or_expression '?' expression • ':' conditional_expression

    ','  shift, and go to state 57
    ':'  shift, and go to state 109


State 90

   42 logical_and_expression: logical_and_expression LOGIC_AND equality_expression •
   44 equality_expression: equality_expression • EQ relational_expression
   45                    | equality_expression • NE relational_expression

    EQ  shift, and go to state 61
    NE  shift, and go to state 62

    $default  reduce using rule 42 (logical_and_expression)


State 91

   44 equality_expression: equality_expression EQ relational_expression •
   47 relational_expression: relational_expression • LT additive_expression
   48                      | relational_expression • GT additive_expression
   49                      | relational_expression • LE additive_expression
   50                      | relational_expression • GE additive_expression

    GT  shift, and go to state 63
    LT  shift, and go to state 64
    LE  shift, and go to state 65
    GE  shift, and go to state 66

    $default  reduce using rule 44 (equality_expression)


State 92

   45 equality_expression: equality_expression NE relational_expression •
   47 relational_expression: relational_expression • LT additive_expression
   48                      | relational_expression • GT additive_expression
   49                      | relational_expression • LE additive_expression
   50                      | relational_expression • GE additive_expression

    GT  shift, and go to state 63
    LT  shift, and go to state 64
    LE  shift, and go to state 65
    GE  shift, and go to state 66

    $default  reduce using rule 45 (equality_expression)


State 93

   48 relational_expression: relational_expression GT additive_expression •
   52 additive_expression: additive_expression • '+' multiplicative_expression
   53                    | additive_expression • '-' multiplicative_expression

    '+'  shift, and go to state 67
    '-'  shift, and go to state 68

    $default  reduce using rule 48 (relational_expression)


State 94

   47 relational_expression: relational_expression LT additive_expression •
   52 additive_expression: additive_expression • '+' multiplicative_expression
   53                    | additive_expression • '-' multiplicative_expression

    '+'  shift, and go to state 67
    '-'  shift, and go to state 68

    $default  reduce using rule 47 (relational_expression)


State 95

   49 relational_expression: relational_expression LE additive_expression •
   52 additive_expression: additive_expression • '+' multiplicative_expression
   53                    | additive_expression • '-' multiplicative_expression

    '+'  shift, and go to state 67
    '-'  shift, and go to state 68

    $default  reduce using rule 49 (relational_expression)


State 96

   50 relational_expression: relational_expression GE additive_expression •
   52 additive_expression: additive_expression • '+' multiplicative_expression
   53                    | additive_expression • '-' multiplicative_expression

    '+'  shift, and go to state 67
    '-'  shift, and go to state 68

    $default  reduce using rule 50 (relational_expression)


State 97

   52 additive_expression: additive_expression '+' multiplicative_expression •
   55 multiplicative_expression: multiplicative_expression • '*' unary_expression
   56                          | multiplicative_expression • '/' unary_expression

    '*'  shift, and go to state 69
    '/'  shift, and go to state 70

    $default  reduce using rule 52 (additive_expression)


State 98

   53 additive_expression: additive_expression '-' multiplicative_expression •
   55 multiplicative_expression: multiplicative_expression • '*' unary_expression
   56                          | multiplicative_expression • '/' unary_expression

    '*'  shift, and go to state 69
    '/'  shift, and go to state 70

    $default  reduce using rule 53 (additive_expression)


State 99

   55 multiplicative_expression: multiplicative_expression '*' unary_expression •

    $default  reduce using rule 55 (multiplicative_expression)


State 100

   56 multiplicative_expression: multiplicative_expression '/' unary_expression •

    $default  reduce using rule 56 (multiplicative_expression)


State 101

   31 assignment_expression: unary_expression assignment_operator assignment_expression •

    $default  reduce using rule 31 (assignment_expression)


State 102

   65 argument_expression_list: assignment_expression •

    $default  reduce using rule 65 (argument_expression_list)


State 103

   63 postfix_expression: postfix_expression '(' argument_expression_list_opt • ')'

    ')'  shift, and go to state 110


State 104

   64 argument_expression_list_opt: argument_expression_list •
   66 argument_expression_list: argument_expression_list • ',' assignment_expression

    ','  shift, and go to state 111

    $default  reduce using rule 64 (argument_expression_list_opt)


State 105

   29 expression: expression • ',' assignment_expression
   62 postfix_expression: postfix_expression '[' expression • ']'

    ','  shift, and go to state 57
    ']'  shift, and go to state 112


State 106

   22 iteration_statement: FOR '(' expression_statement_opt expression_opt • SEMICOLON expression_opt ')' statement

    SEMICOLON  shift, and go to state 113


State 107

   21 iteration_statement: WHILE '(' expression ')' • statement

    INT        shift, and go to state 1
    CHAR       shift, and go to state 2
    LONG       shift, and go to state 3
    VOID       shift, and go to state 4
    FLOAT      shift, and go to state 5
    DOUBLE     shift, and go to state 6
    BOOLEAN    shift, and go to state 7
    FOR        shift, and go to state 8
    STRUCT     shift, and go to state 9
    WHILE      shift, and go to state 10
    IF         shift, and go to state 11
    BREAK      shift, and go to state 12
    CONTINUE   shift, and go to state 13
    RETURN     shift, and go to state 14
    SEMICOLON  shift, and go to state 15
    NUMBER     shift, and go to state 16
    ID         shift, and go to state 17
    '('        shift, and go to state 18
    '+'        shift, and go to state 19
    '-'        shift, and go to state 20
    '!'        shift, and go to state 21

    statement                  go to state 114
    type_specifier             go to state 24
    declaration                go to state 25
    expression_statement       go to state 26
    conditional_statement      go to state 27
    iteration_statement        go to state 28
    jump_statement             go to state 29
    expression                 go to state 30
    assignment_expression      go to state 31
    conditional_expression     go to state 32
    logical_or_expression      go to state 33
    logical_and_expression     go to state 34
    equality_expression        go to state 35
    relational_expression      go to state 36
    additive_expression        go to state 37
    multiplicative_expression  go to state 38
    unary_expression           go to state 39
    postfix_expression         go to state 40
    primary_expression         go to state 41


State 108

   19 conditional_statement: IF '(' expression ')' • statement
   20                      | IF '(' expression ')' • statement ELSE statement

    INT        shift, and go to state 1
    CHAR       shift, and go to state 2
    LONG       shift, and go to state 3
    VOID       shift, and go to state 4
    FLOAT      shift, and go to state 5
    DOUBLE     shift, and go to state 6
    BOOLEAN    shift, and go to state 7
    FOR        shift, and go to state 8
    STRUCT     shift, and go to state 9
    WHILE      shift, and go to state 10
    IF         shift, and go to state 11
    BREAK      shift, and go to state 12
    CONTINUE   shift, and go to state 13
    RETURN     shift, and go to state 14
    SEMICOLON  shift, and go to state 15
    NUMBER     shift, and go to state 16
    ID         shift, and go to state 17
    '('        shift, and go to state 18
    '+'        shift, and go to state 19
    '-'        shift, and go to state 20
    '!'        shift, and go to state 21

    statement                  go to state 115
    type_specifier             go to state 24
    declaration                go to state 25
    expression_statement       go to state 26
    conditional_statement      go to state 27
    iteration_statement        go to state 28
    jump_statement             go to state 29
    expression                 go to state 30
    assignment_expression      go to state 31
    conditional_expression     go to state 32
    logical_or_expression      go to state 33
    logical_and_expression     go to state 34
    equality_expression        go to state 35
    relational_expression      go to state 36
    additive_expression        go to state 37
    multiplicative_expression  go to state 38
    unary_expression           go to state 39
    postfix_expression         go to state 40
    primary_expression         go to state 41


State 109

   38 conditional_expression: logical_or_expression '?' expression ':' • conditional_expression

    NUMBER  shift, and go to state 16
    ID      shift, and go to state 17
    '('     shift, and go to state 18
    '+'     shift, and go to state 19
    '-'     shift, and go to state 20
    '!'     shift, and go to state 21

    conditional_expression     go to state 116
    logical_or_expression      go to state 33
    logical_and_expression     go to state 34
    equality_expression        go to state 35
    relational_expression      go to state 36
    additive_expression        go to state 37
    multiplicative_expression  go to state 38
    unary_expression           go to state 88
    postfix_expression         go to state 40
    primary_expression         go to state 41


State 110

   63 postfix_expression: postfix_expression '(' argument_expression_list_opt ')' •

    $default  reduce using rule 63 (postfix_expression)


State 111

   66 argument_expression_list: argument_expression_list ',' • assignment_expression

    NUMBER  shift, and go to state 16
    ID      shift, and go to state 17
    '('     shift, and go to state 18
    '+'     shift, and go to state 19
    '-'     shift, and go to state 20
    '!'     shift, and go to state 21

    assignment_expression      go to state 117
    conditional_expression     go to state 32
    logical_or_expression      go to state 33
    logical_and_expression     go to state 34
    equality_expression        go to state 35
    relational_expression      go to state 36
    additive_expression        go to state 37
    multiplicative_expression  go to state 38
    unary_expression           go to state 39
    postfix_expression         go to state 40
    primary_expression         go to state 41


State 112

   62 postfix_expression: postfix_expression '[' expression ']' •

    $default  reduce using rule 62 (postfix_expression)


State 113

   22 iteration_statement: FOR '(' expression_statement_opt expression_opt SEMICOLON • expression_opt ')' statement

    NUMBER  shift, and go to state 16
    ID      shift, and go to state 17
    '('     shift, and go to state 18
    '+'     shift, and go to state 19
    '-'     shift, and go to state 20
    '!'     shift, and go to state 21

    expression_opt             go to state 118
    expression                 go to state 48
    assignment_expression      go to state 31
    conditional_expression     go to state 32
    logical_or_expression      go to state 33
    logical_and_expression     go to state 34
    equality_expression        go to state 35
    relational_expression      go to state 36
    additive_expression        go to state 37
    multiplicative_expression  go to state 38
    unary_expression           go to state 39
    postfix_expression         go to state 40
    primary_expression         go to state 41


State 114

    3 statement: statement • declaration
   21 iteration_statement: WHILE '(' expression ')' statement •

    INT      shift, and go to state 1
    CHAR     shift, and go to state 2
    LONG     shift, and go to state 3
    VOID     shift, and go to state 4
    FLOAT    shift, and go to state 5
    DOUBLE   shift, and go to state 6
    BOOLEAN  shift, and go to state 7
    STRUCT   shift, and go to state 9

    INT       [reduce using rule 21 (iteration_statement)]
    CHAR      [reduce using rule 21 (iteration_statement)]
    LONG      [reduce using rule 21 (iteration_statement)]
    VOID      [reduce using rule 21 (iteration_statement)]
    FLOAT     [reduce using rule 21 (iteration_statement)]
    DOUBLE    [reduce using rule 21 (iteration_statement)]
    BOOLEAN   [reduce using rule 21 (iteration_statement)]
    STRUCT    [reduce using rule 21 (iteration_statement)]
    $default  reduce using rule 21 (iteration_statement)

    type_specifier  go to state 24
    declaration     go to state 54


State 115

    3 statement: statement • declaration
   19 conditional_statement: IF '(' expression ')' statement •
   20                      | IF '(' expression ')' statement • ELSE statement

    INT      shift, and go to state 1
    CHAR     shift, and go to state 2
    LONG     shift, and go to state 3
    VOID     shift, and go to state 4
    FLOAT    shift, and go to state 5
    DOUBLE   shift, and go to state 6
    BOOLEAN  shift, and go to state 7
    STRUCT   shift, and go to state 9
    ELSE     shift, and go to state 119

    INT       [reduce using rule 19 (conditional_statement)]
    CHAR      [reduce using rule 19 (conditional_statement)]
    LONG      [reduce using rule 19 (conditional_statement)]
    VOID      [reduce using rule 19 (conditional_statement)]
    FLOAT     [reduce using rule 19 (conditional_statement)]
    DOUBLE    [reduce using rule 19 (conditional_statement)]
    BOOLEAN   [reduce using rule 19 (conditional_statement)]
    STRUCT    [reduce using rule 19 (conditional_statement)]
    ELSE      [reduce using rule 19 (conditional_statement)]
    $default  reduce using rule 19 (conditional_statement)

    type_specifier  go to state 24
    declaration     go to state 54


State 116

   38 conditional_expression: logical_or_expression '?' expression ':' conditional_expression •

    $default  reduce using rule 38 (conditional_expression)


State 117

   66 argument_expression_list: argument_expression_list ',' assignment_expression •

    $default  reduce using rule 66 (argument_expression_list)


State 118

   22 iteration_statement: FOR '(' expression_statement_opt expression_opt SEMICOLON expression_opt • ')' statement

    ')'  shift, and go to state 120


State 119

   20 conditional_statement: IF '(' expression ')' statement ELSE • statement

    INT        shift, and go to state 1
    CHAR       shift, and go to state 2
    LONG       shift, and go to state 3
    VOID       shift, and go to state 4
    FLOAT      shift, and go to state 5
    DOUBLE     shift, and go to state 6
    BOOLEAN    shift, and go to state 7
    FOR        shift, and go to state 8
    STRUCT     shift, and go to state 9
    WHILE      shift, and go to state 10
    IF         shift, and go to state 11
    BREAK      shift, and go to state 12
    CONTINUE   shift, and go to state 13
    RETURN     shift, and go to state 14
    SEMICOLON  shift, and go to state 15
    NUMBER     shift, and go to state 16
    ID         shift, and go to state 17
    '('        shift, and go to state 18
    '+'        shift, and go to state 19
    '-'        shift, and go to state 20
    '!'        shift, and go to state 21

    statement                  go to state 121
    type_specifier             go to state 24
    declaration                go to state 25
    expression_statement       go to state 26
    conditional_statement      go to state 27
    iteration_statement        go to state 28
    jump_statement             go to state 29
    expression                 go to state 30
    assignment_expression      go to state 31
    conditional_expression     go to state 32
    logical_or_expression      go to state 33
    logical_and_expression     go to state 34
    equality_expression        go to state 35
    relational_expression      go to state 36
    additive_expression        go to state 37
    multiplicative_expression  go to state 38
    unary_expression           go to state 39
    postfix_expression         go to state 40
    primary_expression         go to state 41


State 120

   22 iteration_statement: FOR '(' expression_statement_opt expression_opt SEMICOLON expression_opt ')' • statement

    INT        shift, and go to state 1
    CHAR       shift, and go to state 2
    LONG       shift, and go to state 3
    VOID       shift, and go to state 4
    FLOAT      shift, and go to state 5
    DOUBLE     shift, and go to state 6
    BOOLEAN    shift, and go to state 7
    FOR        shift, and go to state 8
    STRUCT     shift, and go to state 9
    WHILE      shift, and go to state 10
    IF         shift, and go to state 11
    BREAK      shift, and go to state 12
    CONTINUE   shift, and go to state 13
    RETURN     shift, and go to state 14
    SEMICOLON  shift, and go to state 15
    NUMBER     shift, and go to state 16
    ID         shift, and go to state 17
    '('        shift, and go to state 18
    '+'        shift, and go to state 19
    '-'        shift, and go to state 20
    '!'        shift, and go to state 21

    statement                  go to state 122
    type_specifier             go to state 24
    declaration                go to state 25
    expression_statement       go to state 26
    conditional_statement      go to state 27
    iteration_statement        go to state 28
    jump_statement             go to state 29
    expression                 go to state 30
    assignment_expression      go to state 31
    conditional_expression     go to state 32
    logical_or_expression      go to state 33
    logical_and_expression     go to state 34
    equality_expression        go to state 35
    relational_expression      go to state 36
    additive_expression        go to state 37
    multiplicative_expression  go to state 38
    unary_expression           go to state 39
    postfix_expression         go to state 40
    primary_expression         go to state 41


State 121

    3 statement: statement • declaration
   20 conditional_statement: IF '(' expression ')' statement ELSE statement •

    INT      shift, and go to state 1
    CHAR     shift, and go to state 2
    LONG     shift, and go to state 3
    VOID     shift, and go to state 4
    FLOAT    shift, and go to state 5
    DOUBLE   shift, and go to state 6
    BOOLEAN  shift, and go to state 7
    STRUCT   shift, and go to state 9

    INT       [reduce using rule 20 (conditional_statement)]
    CHAR      [reduce using rule 20 (conditional_statement)]
    LONG      [reduce using rule 20 (conditional_statement)]
    VOID      [reduce using rule 20 (conditional_statement)]
    FLOAT     [reduce using rule 20 (conditional_statement)]
    DOUBLE    [reduce using rule 20 (conditional_statement)]
    BOOLEAN   [reduce using rule 20 (conditional_statement)]
    STRUCT    [reduce using rule 20 (conditional_statement)]
    $default  reduce using rule 20 (conditional_statement)

    type_specifier  go to state 24
    declaration     go to state 54


State 122

    3 statement: statement • declaration
   22 iteration_statement: FOR '(' expression_statement_opt expression_opt SEMICOLON expression_opt ')' statement •

    INT      shift, and go to state 1
    CHAR     shift, and go to state 2
    LONG     shift, and go to state 3
    VOID     shift, and go to state 4
    FLOAT    shift, and go to state 5
    DOUBLE   shift, and go to state 6
    BOOLEAN  shift, and go to state 7
    STRUCT   shift, and go to state 9

    INT       [reduce using rule 22 (iteration_statement)]
    CHAR      [reduce using rule 22 (iteration_statement)]
    LONG      [reduce using rule 22 (iteration_statement)]
    VOID      [reduce using rule 22 (iteration_statement)]
    FLOAT     [reduce using rule 22 (iteration_statement)]
    DOUBLE    [reduce using rule 22 (iteration_statement)]
    BOOLEAN   [reduce using rule 22 (iteration_statement)]
    STRUCT    [reduce using rule 22 (iteration_statement)]
    $default  reduce using rule 22 (iteration_statement)

    type_specifier  go to state 24
    declaration     go to state 54
